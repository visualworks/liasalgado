<?php

if ( ! class_exists( 'WordPress_Category_Tag_Cloud' ) ) {

	/**
	 * Main / front controller class
	 */
	class WordPress_Category_Tag_Cloud extends WPCTC_Module {
		protected static $readable_properties = array(); // These should really be constants, but PHP doesn't allow class constants to be arrays
		protected static $writeable_properties = array();
		protected $modules;
		protected $modified_types = array();

		const VERSION = '1.7.1';
		const PREFIX = 'wpctc_';
		const DEBUG_MODE = false;

		/*
		 * Magic methods
		 */

		/**
		 * Constructor
		 *
		 * @mvc Controller
		 */
		protected function __construct() {
			$this->register_hook_callbacks();

			$this->modules = array(
				'WPCTC_Settings' => WPCTC_Settings::get_instance()
			);
		}


		/*
		 * Static methods
		 */

		/**
		 * Enqueues CSS, JavaScript, etc
		 *
		 * @mvc Controller
		 */
		public static function load_resources() {
			wp_register_script(
				self::PREFIX . 'jquery-tagcanvas',
				plugins_url( 'javascript/jquery.tagcanvas.min.js', dirname( __FILE__ ) ),
				array( 'jquery' ),
				self::VERSION,
				true
			);

			wp_register_script(
				self::PREFIX . 'wpctc-tagcanvas',
				plugins_url( 'javascript/wpctc.tagcanvas.min.js', dirname( __FILE__ ) ),
				array( 'jquery', self::PREFIX . 'jquery-tagcanvas' ),
				self::VERSION,
				true
			);

			wp_register_script(
				self::PREFIX . 'wp-category-tag-cloud-admin',
				plugins_url( 'javascript/wp-category-tag-cloud-admin.min.js', dirname( __FILE__ ) ),
				array( 'jquery' ),
				self::VERSION,
				true
			);

			wp_register_script(
				self::PREFIX . 'wp-category-tag-cloud',
				plugins_url( 'javascript/wp-category-tag-cloud.min.js', dirname( __FILE__ ) ),
				array( 'jquery' ),
				self::VERSION,
				true
			);

			wp_register_script(
				self::PREFIX . 'jquery-style',
				plugins_url( 'javascript/jquery.style.min.js', dirname( __FILE__ ) ),
				array( 'jquery' ),
				self::VERSION,
				true
			);

			wp_register_style(
				self::PREFIX . 'wpctc',
				plugins_url( 'css/wpctc.min.css', dirname( __FILE__ ) ),
				array(),
				self::VERSION,
				'all'
			);

			if ( is_admin() ) {
				wp_enqueue_style( 'farbtastic' );
				wp_enqueue_script( 'farbtastic' );
				wp_enqueue_script( self::PREFIX . 'wp-category-tag-cloud-admin' );
			} elseif (!isset(WPCTC_Settings::get_instance()->settings['general'])
				|| !isset(WPCTC_Settings::get_instance()->settings['general']['do-not-load-scripts'])
				|| WPCTC_Settings::get_instance()->settings['general']['do-not-load-scripts'] != 1) {
				wp_enqueue_style(self::PREFIX . 'wpctc');
				wp_enqueue_script(self::PREFIX . 'jquery-tagcanvas');
				wp_enqueue_script(self::PREFIX . 'wpctc-tagcanvas');
				wp_enqueue_script(self::PREFIX . 'jquery-style');
				wp_enqueue_script(self::PREFIX . 'wp-category-tag-cloud');
			}
		}

		/**
		 * Clears caches of content generated by caching plugins like WP Super Cache
		 *
		 * @mvc Model
		 */
		public static function clear_caching_plugins() {
			// WP Super Cache
			if ( function_exists( 'wp_cache_clear_cache' ) ) {
				wp_cache_clear_cache();
			}

			// W3 Total Cache
			if ( class_exists( 'W3_Plugin_TotalCacheAdmin' ) ) {
				$w3_total_cache = w3_instance( 'W3_Plugin_TotalCacheAdmin' );
				if ( method_exists( $w3_total_cache, 'flush_all' ) ) {
					$w3_total_cache->flush_all();
				}
			}

			//Hyper Cache
			if ( class_exists( 'HyperCache')) {
				$hyper_cache = HyperCache::$instance;
				if ( method_exists( $hyper_cache, 'flush_all' ) ) {
					$hyper_cache->remove_dir($hyper_cache->get_folder() . '');
				}
			}
		}

		/*
		 * Instance methods
		 */

		/**
		 * Prepares sites to use the plugin during single or network-wide activation
		 *
		 * @mvc Controller
		 *
		 * @param bool $network_wide
		 */
		public function activate( $network_wide ) {
			global $wpdb;

			if ( function_exists( 'is_multisite' ) && is_multisite() ) {
				if ( $network_wide ) {
					$blogs = $wpdb->get_col( "SELECT blog_id FROM $wpdb->blogs" );

					foreach ( $blogs as $blog ) {
						switch_to_blog( $blog );
						$this->single_activate( $network_wide );
					}

					restore_current_blog();
				} else {
					$this->single_activate( $network_wide );
				}
			} else {
				$this->single_activate( $network_wide );
			}
		}

		/**
		 * Runs activation code on a new WPMS site when it's created
		 *
		 * @mvc Controller
		 *
		 * @param int $blog_id
		 */
		public function activate_new_site( $blog_id ) {
			switch_to_blog( $blog_id );
			$this->single_activate( true );
			restore_current_blog();
		}

		/**
		 * Prepares a single blog to use the plugin
		 *
		 * @mvc Controller
		 *
		 * @param bool $network_wide
		 */
		protected function single_activate( $network_wide ) {
			foreach ( $this->modules as $module ) {
				$module->activate( $network_wide );
			}
		}

		/**
		 * Rolls back activation procedures when de-activating the plugin
		 *
		 * @mvc Controller
		 */
		public function deactivate() {
			foreach ( $this->modules as $module ) {
				$module->deactivate();
			}
		}

		/**
		 * Register callbacks for actions and filters
		 *
		 * @mvc Controller
		 */
		public function register_hook_callbacks() {
			add_action( 'wpmu_new_blog', __CLASS__ . '::activate_new_site' );
			add_action( 'wp_enqueue_scripts', __CLASS__ . '::load_resources' );
			add_action( 'admin_enqueue_scripts', __CLASS__ . '::load_resources' );

			add_action( 'init', array( $this, 'init' ) );
			add_action( 'init', array( $this, 'upgrade' ), 11 );
			add_shortcode( 'showtagcloud', array( $this, 'get_tag_cloud' ) );
		}

		/**
		 * Initializes variables
		 *
		 * @mvc Controller
		 */
		public function init() {
			try {
			} catch ( Exception $exception ) {
				add_notice( __METHOD__ . ' error: ' . $exception->getMessage(), 'error' );
			}
		}

		/**
		 * Checks if the plugin was recently updated and upgrades if necessary
		 *
		 * @mvc Controller
		 *
		 * @param string $db_version
		 */
		public function upgrade( $db_version = 0 ) {
			if ( version_compare( $this->modules['WPCTC_Settings']->settings['db-version'], self::VERSION, '==' ) ) {
				return;
			}

			foreach ( $this->modules as $module ) {
				$module->upgrade( $this->modules['WPCTC_Settings']->settings['db-version'] );
			}

			$this->modules['WPCTC_Settings']->settings = array( 'db-version' => self::VERSION );
			self::clear_caching_plugins();
		}

		/**
		 * Checks that the object is in a correct state
		 *
		 * @mvc Model
		 *
		 * @param string $property An individual property to check, or 'all' to check all of them
		 *
		 * @return bool
		 */
		protected function is_valid( $property = 'all' ) {
			return true;
		}

		public function get_tag_cloud( $options ) {
			ob_start();

			$widget                 = new WPCTC_Widget;
			$args                   = array(
				'before_widget' => '',
				'before_title'  => '',
				'after_title'   => '',
				'widget_id'     => 'wpctc_post_' . get_the_ID(),
				'after_widget'  => '',
			);
			$options['category_id'] = isset( $options['category_id'] ) ? explode( ',', $options['category_id'] ) : array();
			$options['tag_id']      = isset( $options['tag_id'] ) ? explode( ',', $options['tag_id'] ) : array();
			$instance               = $widget->update( $options, null );
			$instance['title']      = '';
			$widget->widget( $args, $instance );

			$output = ob_get_clean();

			return $output;
		}
	}

	; // end WordPress_Category_Tag_Cloud
}
